vue.js 중급 강좌 - 웹앱 제작으로 배워보는 vue.js ES6, Vuex

git : https://github.com/joshua1988/vue-intermediate/tree/es6/const-let/vue-todo

https://github.com/joshua1988/vue-intermediate/blob/todo-app/components-implementation/vue-todo/src/components/TodoList.vue

*앵귤러와 리엑트의 장점을 결합한게 vue.js임

github - https://github.com/joshua1988/vue-intermediate

-섹션2. Todo App - 프로젝트 소개 및 구성
ㅁ뷰 CLI로 프로젝트 생성하기
터미널 -> vue create vue-todo
서버실행 : npm run serve

ㅁ프로젝트 소개 및 컴포넌트 설계 방법

-섹션3. Todo App - 프로젝트 구현
ㅁ컴포넌트 생성 및 등록하기
ㅁ파비콘,아이콘,폰트,반응형 태그 설정하기
ㅁTodoHeader 컴포넌트 구현
ㅁTodoInput 컴포넌트의 할 일 저장 기능 구현
v-model input에 입력된 텍스트 값을 동적으로 뷰 인스턴스 안에 맵핑

ㅁTodoInput 컴포넌트 코드 정리 및 UI 스타일링
ㅁTodoList 컴포넌트의 할 일 목록 표시 기능 구현
ul>li*3

ㅁTodoList 컴포넌트 UI 스타일링
ㅁTodoList 컴퓨넌트 할 일 삭제 기능 구현
ㅁTodoList 컴포넌트의 할 일 완료 기능 구현
v-bind : html 속성에다가 동적인 값을 부여 할 수있음

ㅁTodoFooter 컴포넌트 구현

-섹션4. Todo App - 애플리케이션 구조 개선하기
ㅁ현재 앱 구조의 문제점 진단 및 개선된 앱 구조 소개
ㅁ[리팩토링]할 일 목록 표시 기능
ㅁ[리팩토링]할 일 추가 기능
TodoList에서는 최대한 표현만,
이벤트 같은 기능은 App.vue에서 처리할 수 있도록 로직 변경

ㅁ[리펙토링]할 일 삭제 기능
ㅁ[리팩토링]할 일 완료 기능
App.vue 파일이 컨테이너의 성격을 갖고 있기 때문에 todoItems를 접근해서 조작을 하는것이 좋음

ㅁ[리팩토링]할 일 모두 삭제 기능
ㅁ리팩토링이 완료된 애플리케이션 정리

-섹션5.Todo App - 사용자 경험 개선
ㅁ모달 컴포넌트 등록
현재 뷰에서 지향하는 템플릿의 구조는 무조건 템플릿 태그 안에 한개의 루트 엘레먼트, 한개의 태그만 들어가고 
나머지는 다 하위에 들어가야함.

ㅁ모달 컴포넌트의 slot 소개 및 퀴즈 안내
ㅁslot 퀴즈 풀이 및 모달 컴포넌트 기능 구현
v-onClick="" 축약형
-> @click="" 

ㅁ트렌지션 소개 및 구현

-섹션6. 강의 중간 정리
ㅁ강의 중간 정리
1.뷰 CLI를 이용한 프로젝트 구성 방법
2.컴포넌트 기반 설계 방법
3.컴포넌트 구조화 및 컴포넌트 통신 방법
4.ES6를 이용한 효율적이고 간겨란 뷰 코딩 방법
5.Vuex를 이용한 상태 관리의 이해 및 적용 방법

-섹션7. ES6 for Vue.js - 오리엔테이션
ㅁES6 강의 개요 및 목표 소개
ES6란? JS 최신의 문법

ES6란? 
*ECMAScript 2014와 동일한 용어
*2015년은 es5(2009년)이래로 진행한 첫 메이저 업데이트가 승인된 해
*최신 FRONT-End Framework인 React, Angularm Vue에서 권고하는 언어 형식
*ES5에 비해 문법이 간결해져서 익숙해지면 코딩을 훨씬 편하게 할 수 있음

ㅁES6 배경과 Babel 소개

-섹션 8.ES6 for Vue.js - const & let
ㅁconst & let 소개
ㅁ[ES5의 주소 특징]변수 스코프와 호이스팅
호이스트 : 끌어 올려진다.
함수랑 변수가 가장 상단에 있는것처럼 인식

ES5특징 - ㅙㅑㄴ샤ㅜㅎ
*Hosting 이란 선언한 함수와 변수를 해석기가 가장 상단에 있는 것처럼 인식
*js 해석기는 코드의 라인 순서와 관계 없이 함수선언식과 변수를 위한 메모리 공간을 먼저 확보
*따라서, function a()와 var는 코드의 최상단으로 끌어 올려진것 (hoisted)처럼 보인다 
=> 메모리 공간을 먼저 확보하기 때문에

ㅁconst와 let 추가 설명 및 정리
ES6 - const로 지정한 값 변경 불가능
const a = 10;
a = 20; //에러 발생

하지만, 객체나 배열의 내부는 변경 할 수 잇음
const a = {};
a.num = 10;

const b = [];
const a = [];
a.push(20);

ㅁ[리팩토링]const와 let

-섹션9.ES6 for Vue.js - 화살표 함수
ㅁ화살표 함수 소개 및 설명
*화살표 함수
함수를 정희할 때 function 이라는 키워드를 사용하지 않고 => 로 대체
흔히 사용하는 콜백 함수의 문법을 간결화

//ES5 함수 정의 방식
var sum function(a,b){ }

//ES6 함수 정의 방식
var sum = (a,b) => { }

ㅁ화살표 함수 실습

-섹션10.ES6 for Vue.js - Enhanced Object Literals
ㅁ속성 메서드의 축약 특징 설명
*Enhanced Object Literals : 향상된 객체 리터럴
객체의 속성을 메서드로 사용할 때 function 예약어를 생략하고 생성 가능

**향상된 객체 리터럴 
//ES5
var dictionary = {
	lookup: function lookup(){
		console.log('found sth')
	}
};

//ES6
var dictionary = {
	lookup(){
		console.log('found sth')
	}
};

ㅁ[리팩토링]속성 메서드의 축약 특징 리팩토링