Vue 는 무엇인가? 
MVVM 패턴의 뷰 모델 (ViewModel)레이어에 해당하는 화면(View)단 라이브러리 

html은 화면에 나타나는 어떤 태그 DOM의 정보를 넣는거고 그리고 그 자바스크립트가 하는 역할은
해당 태그나 돔의 내용을 조작하는 것임

뷰의 핵심은 데이터의 변화를 라이브러리에서감지해서 알아서 화면을 자동으로 그려주는것 => 데이터 바인딩
Reactivity : 데이터의 변화에 따라 화면이 자동으로 그려지는것,

-섹션2. 인스턴스
ㅁ인스턴스 소개
뷰 인스턴스
뷰로 개발할 때 필수로 생성해야 하는 코드

인스턴스 생성 
new Veu();

변수 안에 인스턴스 내용을 담을 수 있음 
let vm = new Vue();
console.log(vm);

apl : 기능 

ㅁ인스턴스와 생성자 함수
function Person(){}

함수 앞에 함수 이름이 대문자면 생성자 함수를 의미

ㅁ인스턴스 옵션 속성
new Vue({
	el:,
	template:,
	data:,
	methods:,
	watch:,
});

	el: 인스턴스가 그려지는 화면이 시작점 (특정 HTML 태그)
	template: 화면에 표시할 요소 (HTML,CSS 등)
	data:뷰의 반응성 (Reactivity)가 반영된 데이터 속성
	methods: 화면의 동작과 이벤트 로직을 제어하는 메서드
	created : 뷰의 라이프 사이클과 관련된 속성
	watch: data에서 정의한 속성이 변화했을 때 추가 동작을 수행할 수 있게 정의하는..

-섹션 3.컴포넌트
ㅁ컴포넌트 소개
Vue.js 특징 중에 컴포넌트라는 특징이 있음
컴포넌트는 화면의 영역을 구분하여 개발할 수 있는 뷰의 기능임
컴포넌트 기반으로 화면을 개발하게 되면 코드의 재사용성이 올라가고 빠르게 화면을 제작할 수 있음

ㅁ[실습 안내]컴포넌트 등록 및 실습
인스턴스를 생성하면 그건 기본적으로 루트 컴포넌트가 됨
크롬 > console > 개발자 모드 > vue > <Root> = $vm0 

ㅁ[실습풀이]전역 컴포넌트 등록
ㅁ지역컴포넌트 등록
서비스를 만들때 가장 많이 쓰는 지역 컴포넌트 등록 방식
서비스를 구형할때 필요한 로직이 한개가아니라 여러 개이기 때문에 지역 컴포넌트는 component 뒤에 s가 들어감 

ㅁ전역 컴포넌트와 지역 컴포넌트의 차이점
지역 컴포넌트는 하단에 어떤게 등록되는지 컴포넌트 속성으로 알 수 있음 => 일반적인 방법

ㅁ컴포넌트와 인스턴스와의 관계
전역 컴포넌트는 인스턴트를 생성할 때마다 따로 등록할 필요없이 모든 인스턴스에 다등록이 됨
지역 컴포넌트 같은 경우엔 인스턴스마다 새로 생성을 해주어야 함 => 인스턴스를 많이 생성해야 할때 번거로울 수 있음

-섹션4. 컴포넌트 통신 방법-기본
ㅁ컴포넌트 통신
컴포넌트 통신 방식 :
뷰 컴포넌트는 각각 고유한 데이터 유효 범위를 갖습니다. 따라서, 컴포넌트 간에 데이터를 주고 받기 위해선 규직을 따라야함
*상위서 하위로는 데이터를 내려줌, 프롭스 속성
*하위에서 상위로는 이벤트를 올려줌, 이벤트 발생

ㅁ컴포넌트 통신 규칙이 필요한 이유
특정 컴포넌트의 변화에 따라서 나머지 컴포넌트가 유기적으로 계속 데이터를 주고 받았을때 데이터의 방향을 예측하기 어려움
특정 상태 기능이 바뀌었을때 그로 인한 버그를 추적하기 어려움 => n방향 통신의 어려움

만약 데이터가 아래로만 데이터가 내려간다면? => 컴포넌트 통신 규칙
데이터의 흐름을 추적할 수 있다.

컴포넌트 간의 데이터 전달과 통신 방법
위에서 아래 : Props
아래에서 위에 : Event

ㅁprops 속성
ㅁprops 속성의 특징
상위 컴포넌트의 데이터를 바꾸는 순간 하위 컴포넌트의 데이터가 바뀌면서 하위 컴포넌트의 프롭스 속성에 반영되면서
하면까지 다시 그려지는게 프롭스임

ㅁ[실습 안내]props 속성 실습
ㅁ[실습 안내]props 속성 풀이
루트 컴포넌트의 넘버가 바뀌었을때 값이 바뀐 상태로 아래에 전달이 됨
전달이 된 값이 화면에 바로 반영되서 그려지는게 Reactivity 

ㅁevent emit
ㅁevent emit으로 콘솔 출력하기
하위 컴포넌트에서 상위 컴포넌트로 통신하여 이벤트를 발생하는 방식
ㅁ[실습안내]event emit 실습 안내
ㅁ[실습안내]event emit 실습 풀이
ㅁ뷰 인스턴스에서의 this

-섹션 5.컴포넌트 통신 방법 - 응용
ㅁ같은 컴포넌트 레벨 간의 통신 방법
ㅁ같은 컴포넌트 레벨 간의 통신 방법 구현1
ㅁ같은 컴포넌트 레벨 간의 통신 방법 구현2

-섹션 6.라우터
ㅁ뷰 라우터 소개와 설치
뷰 라우터는 뷰 라이브러리를 이용하여 싱글 페이지 애플리케이션을 구현할 때 사용하는 라이브러리

뷰 라우터 설치 2가지
CDN 방식과 NPM 방식 있음

<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script> //뷰제이에스
<script src="https://unpkg.com/vue-router@3.5.3/dist/vue-router.js"></script> //뷰라우터

ㅁ뷰 라우터 인스턴스 연결 및 초기 상태 안내
ㅁ[실습안내]routers 속성 설명 및 실습 안내
ㅁ라우터가 표시되는 영역 및 router-view 태그 설명
페이지 URL이 이동했울때 페이지 URL이 변경됐을때 URL에 따라서 뿌려지는 영역을 라우터 뷰라고 라우터가 갖고 있는
태드로 정의 할 수 있음

*라우터 뷰 동작 확인 방법
url에 login이라고 쳐봐!
http://127.0.0.1:5500/playground/router.html#/login
url이 로그인인 경우에는 routerview에 최종적으로 로그인 컴포넌트의 내용이 들어감

ㅁ링크를 이용한 페이지 이동 및 router-link 태그 설명
라우터에서 페이지 이동을 하기 위한 링크 태그임 
<router-link to="/login">Login</router-link>
<router-link to="/main">Main</router-link>

<a href=""></a> 와 같음

ㅁ라우터 정리 및 학습 방향 안내
해당 페이지마다 뿌려질 컴포넌트는 무조건하나이기 때문에 component 임!

-섹션7. HTTP통신 라이브러리 -axios
ㅁHTTP라이브러리와 Ajax 그리고 Vue Resource
엑시오스 :
뷰에서 권고하는 HTTP통신 라이브러리는 액시오스(Axios)이다. Promise 기반의 HTTP통신 라이브러리이며 상대적으로
다른 HTTP 통신 라이브러리들에 비해 문서화가 잘되어 있고 API가 다양함

일반적으로 화면에서 데이터를 바꿀때 서버를 갓다와서 데이터를 바꾸었어야함
하지만 지금은 서버에 데이터를 요청해서 데이터를 바꿔 끼워 주면됨

ㅁaxios 소개 및 오픈 소스를 사용하기전에 알아야 할것들 
Promise 자바 스크립트의 비동기 처리 패턴을 의미

자바스크립트의 비동기 처리 패턴
1. callback
2. promise
3. promise + generator
4. async & await

ㅁaxios 실습 및 this 설명

ㅁ웹 서비스에서의 클라이언트와 서버와의 HTTP통신 구조
HTTP Request 요청
HTTP Response 응답
요청과 응답으로 이루어 지는것이 클라이언트와 서버와의 구조

순서
1. 요청
2. 백엔드 로직
3. db
4. db의 데이터의 결과 
5. 벡앤드로 로직
6. 응답

ㅁ크롬 개발자 도구 네트워크 패널 보는 방법
Headers : 일반적인 정보들을 담는 특정 요청에 대한 정보라든지 응답에 대한 정보를 부가적인 정보를 담는곳

프런트엔드 개발자가 알아야하는 HTTP 프로토콜 Part 1
https://joshua1988.github.io/web-development/http-part1/ 

-섹션.8 템플릿 문법 - 기본
ㅁ템플릿 문법 소개
뷰의 템플릿 문법
뷰이 템플릿 문법이란 뷰로 화면을 조작하는 방법을 의미함
템플릿 문법은 크게 데이터 바인딩과 디렉티브로 나뉨

#데이터 바인딩
데이터 바인딩은 뷰 인스턴스에서 정의한 속성들을 화면에 표시하는 방법 가장 기본적인 데이터 바인딩 방식은 콧수염 괄호이다.
<div>{{message}}</div>

new Vue({
	data: {
		message : 'Hello Vue.js'
	}
});

#디렉티브 v-OOO 
v- 뒤에 붙는 속성들을 디렉티브라고 함
디렉티브는 뷰로 화면의 요소를 더 쉽게 조작하기 위한 문법이다.
화면 조작에서 자주 사용되는 방식들을 모아 디렉티브 형태로 제공하고 있다. 
예를들어 아래와 같이 특정 속성 값에 따라 화면의영역을 표시하거나 표시하지 않을 수 있다.

<div>
	Hello <span v-if="show">Vue.js</span>
</div>

new Vue({
	data: {
		show : false
	}
})

ㅁ데이터 바인딩과 computed 속성
computed : 데이터의 값에 따라서 바뀌는 값을 정의할때 사용 

ㅁ[실습안내]뷰 디렉티브와 v-bind
뷰 디렉티브 : v- 붙는 특수한 속성들 

예전에는 DOM을 일이리 쫒아가서 그 안에 내용들을 일이리 바꿔 주었어야함,
*화면에서 뿐만 아니라 DOM에 대한 정보들까지 리액티브하게 바로바로 다시 반영해서 DOM을 변경해주는게 뷰에서 하는 역할임!

ㅁ[실습풀이]클래스 바인딩, v-if, v-show
ㅁ모르는 문법이 나왔을때 공식 문서를 보고 해결하는 방법
vue.js 공식문서 사이트 : https://vue.js.org/
ㅁmethods 속성과 v-on 디렉티브를 이용한 키보드, 마우스 이벤트 처리 방법
v-on 키도브 입력, 마우스 입력에 대해서 받을 수 있는 뷰 디렉티브임

-섹션9.템플릿 문법-실전
ㅁwatch속성
데이터를 대상으로넣을 수 있고 데이터의 변화에 따라서 특정 로직을 실행할 수 있는 뷰의 속성임

ㅁwatch 속성 vs computed 속성
웬만하면 컴피티드를 쓰는게좋고, 왓치보다는 ㅋ머피티드가 대부분의 케이스에 적합함
코드가 너저분해질 수 있음

ㅁcomputed 속성을 이용한 클래스 코드 작성 방법
*직관적인 코드작성법 배우기
클래스를 넣을때 여러가지 조건을 넣을 수 있음
조건에 따라서 클래스 네임이 들어갈 수 있음

방법1.
    <div id="app">
        <p v-bind:class="cname">Hello/</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script>
        new Vue({
            el : '#app',
			cname : 'blue-text',
            data: {
                isError: false
            }
        });
	</script>		
방법2.
    <div id="app">
        <p v-bind:class="warning: isError">Hello/</p>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script>
        new Vue({
            el : '#app',
            data: {
                isError: false
            }
        });
	</script>
	
방법3.
github에서 확인하기	

-섹션10.프로젝트 생성 도구 Vue CLI
ㅁ최신 Vue CLI 소개
Command Line Interface의 약자
명령어를 통해 특정 액션을 수행하는 도구를 의미

ㅁVue CLI도구 설치할 때 문제점 해결 방법
설치 경로 : C:\Users\A\AppData\Roaming\npm\node_modules

ㅁCLI 2.x와 3.x의 차이점 / 프로젝트 생성 및 서버 실행
[Vue CIL 2.x]
vue init '프로젝트 템플릿 유형' '프로젝트 폴더 위치'
vue init webpack-simple '프로젝트 폴더 위치'

[Vue CIL 3.x]
vue create '프로젝트 폴더 위치'

현재 위치 패키지에서 터미널 여는 방법 : 컨트롤 + ~
ex) vue create my-vue-app
cd vue-cli
npm run serve

ㅁCLI로 생성한 프로젝트 폴더 구조 확인 및 main.js파일 설명



